{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Simple Config Builder","text":"<p>This is a simple tool to help you build a configuration file for your project.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install simple_config_builder\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>When writing your library configuration files are often a necessity.  Instead of using a dictionary or a class to store your configuration, you can build config classes using this tool.</p> <pre><code>from simple_config_builder.config import configclass\nfrom simple_config_builder.config import config_field\n\n@configclass\nclass MyConfig:\n    name: str = \"John Doe\"\n    age: int = 30\n    is_student: bool = False\n    grades: int = config_field(gt=0, lt=100)\n</code></pre> <p>This will create a class with the specified fields and default values and validation rules.</p> <p>For IO, you can use </p> <pre><code>from simple_config_builder.configparser import Configparser\nfrom simple_config_builder.config import configclass\nfrom simple_config_builder.config import config_field\n\n@configclass\nclass MyConfig:\n    name: str = \"John Doe\"\n    age: int = 30\n    is_student: bool = False\n    grades: int = config_field(gt=0, lt=100, default=90)\n\n# Load and parse the configuration file\nconfig = Configparser(\"config.json\")\n\n# Save the configuration file\nconfig.save()\n\n# reload the configuration file\nconfig.reload()\n\n# Set a config object\nconfig['my_config'] = MyConfig(\"John Doe\", 30, False, 90)\n</code></pre> <p>Apart from that autosave and autoreload is supported. </p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api/","title":"API DOCS","text":""},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024-present jogehl joshuagehlen@hotmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"apis/config/","title":"Config","text":"<p>Test implementation of a config class decorator and a registry.</p>"},{"location":"apis/config/#simple_config_builder.config.ConfigClassRegistry","title":"<code>ConfigClassRegistry</code>","text":"<p>Registry to hold all registered classes.</p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>class ConfigClassRegistry:\n    \"\"\"Registry to hold all registered classes.\"\"\"\n\n    __registry: ClassVar = {}  # Class variable to hold the registry\n\n    @classmethod\n    def get_class_str_from_class(cls, class_to_register: type):\n        \"\"\"\n        Get the class string from a class.\n\n        The class string is the module and class name of the\n        class separated by a dot.\n\n        Example:\n            ```\n            class_to_register = MyClass\n            get_class_str_from_class(class_to_register)\n            # Returns: \"mymodule.MyClass\"\n            ```\n\n\n        Params:\n            class_to_register: The class to get the class string from.\n        \"\"\"\n        return f\"{class_to_register.__module__}.{class_to_register.__name__}\"\n\n    @classmethod\n    def register(cls, class_to_register: type):\n        \"\"\"\n        Register a class in the global registry.\n\n        Params:\n            class_to_register: The class to register.\n\n        Raises:\n            ValueError: If the class is already registered.\n        \"\"\"\n        if class_to_register not in cls.__registry:\n            class_str = cls.get_class_str_from_class(class_to_register)\n            cls.__registry[class_str] = class_to_register\n        else:\n            exception_msg = (\n                f\"{cls.get_class_str_from_class(class_to_register)} \"\n                f\"is already registered.\"\n            )\n            raise ValueError(exception_msg)\n\n    @classmethod\n    def list_classes(cls) -&gt; list[str]:\n        \"\"\"\n        List all registered classes.\n\n        Returns:\n            A list of class strings of all registered classes.\n        \"\"\"\n        return list(cls.__registry.keys())\n\n    @classmethod\n    def is_registered(cls, class_to_register)-&gt; bool:\n        \"\"\"\n        Check if a class is already registered.\n\n        Params:\n            class_to_register: The class to check.\n        \"\"\"\n        return (\n            cls.get_class_str_from_class(class_to_register) in cls.__registry\n        )\n\n    @classmethod\n    def get(cls, class_name) -&gt; type:\n        \"\"\"\n        Get a class from the registry by name.\n\n        Params:\n            class_name: The name of the class to get.\n\n        Raises:\n            ValueError: If the class is not registered.\n\n        Returns:\n            The class if it is registered.\n        \"\"\"\n        for class_to_register in cls.__registry:\n            if class_to_register == class_name:\n                return cls.__registry[class_to_register]\n        raise ValueError(f\"{class_name} is not registered.\")\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.ConfigClassRegistry.get","title":"<code>get</code>  <code>classmethod</code>","text":"<p>Get a class from the registry by name.</p> PARAMETER DESCRIPTION <code>class_name</code> <p>The name of the class to get.</p> <p> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If the class is not registered.</p> RETURNS DESCRIPTION <code>type</code> <p>The class if it is registered.</p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>@classmethod\ndef get(cls, class_name) -&gt; type:\n    \"\"\"\n    Get a class from the registry by name.\n\n    Params:\n        class_name: The name of the class to get.\n\n    Raises:\n        ValueError: If the class is not registered.\n\n    Returns:\n        The class if it is registered.\n    \"\"\"\n    for class_to_register in cls.__registry:\n        if class_to_register == class_name:\n            return cls.__registry[class_to_register]\n    raise ValueError(f\"{class_name} is not registered.\")\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.ConfigClassRegistry.get_class_str_from_class","title":"<code>get_class_str_from_class</code>  <code>classmethod</code>","text":"<p>Get the class string from a class.</p> <p>The class string is the module and class name of the class separated by a dot.</p> Example <pre><code>class_to_register = MyClass\nget_class_str_from_class(class_to_register)\n# Returns: \"mymodule.MyClass\"\n</code></pre> PARAMETER DESCRIPTION <code>class_to_register</code> <p>The class to get the class string from.</p> <p> TYPE: <code>type</code> </p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>@classmethod\ndef get_class_str_from_class(cls, class_to_register: type):\n    \"\"\"\n    Get the class string from a class.\n\n    The class string is the module and class name of the\n    class separated by a dot.\n\n    Example:\n        ```\n        class_to_register = MyClass\n        get_class_str_from_class(class_to_register)\n        # Returns: \"mymodule.MyClass\"\n        ```\n\n\n    Params:\n        class_to_register: The class to get the class string from.\n    \"\"\"\n    return f\"{class_to_register.__module__}.{class_to_register.__name__}\"\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.ConfigClassRegistry.is_registered","title":"<code>is_registered</code>  <code>classmethod</code>","text":"<p>Check if a class is already registered.</p> PARAMETER DESCRIPTION <code>class_to_register</code> <p>The class to check.</p> <p> </p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>@classmethod\ndef is_registered(cls, class_to_register)-&gt; bool:\n    \"\"\"\n    Check if a class is already registered.\n\n    Params:\n        class_to_register: The class to check.\n    \"\"\"\n    return (\n        cls.get_class_str_from_class(class_to_register) in cls.__registry\n    )\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.ConfigClassRegistry.list_classes","title":"<code>list_classes</code>  <code>classmethod</code>","text":"<p>List all registered classes.</p> RETURNS DESCRIPTION <code>list[str]</code> <p>A list of class strings of all registered classes.</p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>@classmethod\ndef list_classes(cls) -&gt; list[str]:\n    \"\"\"\n    List all registered classes.\n\n    Returns:\n        A list of class strings of all registered classes.\n    \"\"\"\n    return list(cls.__registry.keys())\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.ConfigClassRegistry.register","title":"<code>register</code>  <code>classmethod</code>","text":"<p>Register a class in the global registry.</p> PARAMETER DESCRIPTION <code>class_to_register</code> <p>The class to register.</p> <p> TYPE: <code>type</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If the class is already registered.</p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>@classmethod\ndef register(cls, class_to_register: type):\n    \"\"\"\n    Register a class in the global registry.\n\n    Params:\n        class_to_register: The class to register.\n\n    Raises:\n        ValueError: If the class is already registered.\n    \"\"\"\n    if class_to_register not in cls.__registry:\n        class_str = cls.get_class_str_from_class(class_to_register)\n        cls.__registry[class_str] = class_to_register\n    else:\n        exception_msg = (\n            f\"{cls.get_class_str_from_class(class_to_register)} \"\n            f\"is already registered.\"\n        )\n        raise ValueError(exception_msg)\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.config_field","title":"<code>config_field</code>","text":"<p>Create a field with constraints.</p> PARAMETER DESCRIPTION <code>gt</code> <p>The minimum value of the field.</p> <p> DEFAULT: <code>None</code> </p> <code>lt</code> <p>The maximum value of the field.</p> <p> DEFAULT: <code>None</code> </p> <code>default</code> <p>The default value of the field.</p> <p> DEFAULT: <code>None</code> </p> <code>default_factory</code> <p>The default factory of the field.</p> <p> DEFAULT: <code>None</code> </p> <code>_in</code> <p>A list of valid values for the field.</p> <p> TYPE: <code>list | None</code> DEFAULT: <code>None</code> </p> <code>constraints</code> <p>A list of constraint functions for the field.</p> <p> TYPE: <code>list[Callable[..., bool]] | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>Field</code> <p>A dataclasses.Field object with the constraints.</p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>def config_field(\n    *,\n    gt=None,\n    lt=None,\n    default=None,\n    default_factory=None,\n    _in: list | None = None,\n    constraints: list[Callable[..., bool]] | None = None,\n)-&gt; dataclasses.Field:\n    \"\"\"\n    Create a field with constraints.\n\n    Params:\n        gt: The minimum value of the field.\n        lt: The maximum value of the field.\n        default: The default value of the field.\n        default_factory: The default factory of the field.\n        _in: A list of valid values for the field.\n        constraints: A list of constraint functions for the field.\n\n    Returns:\n        A dataclasses.Field object with the constraints.\n    \"\"\"\n    return dataclasses.field(\n        default=default if default is not None else dataclasses.MISSING,\n        default_factory=default_factory\n        if default_factory is not None\n        else dataclasses.MISSING,\n        metadata={\"gt\": gt, \"lt\": lt, \"_in\": _in, \"constraints\": constraints},\n    )\n</code></pre>"},{"location":"apis/config/#simple_config_builder.config.configclass","title":"<code>configclass</code>","text":"<p>Make a Configclass from a standard class with attributes.</p> <p>This decorator adds the following functionality: - Registers the class with Config - Adds a _config_class_type attribute to the class - Convert a to a pyserde class for serialization and deserialization - Adds property methods for fields with constraints which are defined using the config_field decorator.</p> PARAMETER DESCRIPTION <code>class_to_register</code> <p>The class to register with Config.</p> <p> TYPE: <code>type</code> DEFAULT: <code>None</code> </p> Source code in <code>src/simple_config_builder/config.py</code> <pre><code>def configclass(class_to_register: type = None, *_args, **_kwargs):\n    \"\"\"\n    Make a Configclass from a standard class with attributes.\n\n    This decorator adds the following functionality:\n    - Registers the class with Config\n    - Adds a _config_class_type attribute to the class\n    - Convert a to a pyserde class for serialization and deserialization\n    - Adds property methods for fields with constraints which\n    are defined using the config_field decorator.\n\n    Params:\n        class_to_register: The class to register with Config.\n    \"\"\"\n\n    def decorator(class_to_register):\n        registry = ConfigClassRegistry()\n        registry.register(class_to_register)\n\n        # Add a _config_class_type attribute to the class for serialization\n        # Also add the annotation to the class\n        setattr(\n            class_to_register,\n            \"_config_class_type\",\n            ConfigClassRegistry.get_class_str_from_class(class_to_register),\n        )\n        class_to_register.__annotations__[\"_config_class_type\"] = str\n\n        # Add pyserde decorator\n        class_to_register = serde(class_to_register)\n\n        def create_property(\n            name, gt=None, lt=None, _in=None, constraints=None\n        ):\n            def getter(self):\n                return getattr(self, f\"_{name}\")\n\n            def setter(self, value):\n                if gt is not None and value &lt; gt:\n                    exception_message = f\"{name} must be greater than {gt}\"\n                    raise ValueError(exception_message)\n                if lt is not None and value &gt; lt:\n                    exception_message = f\"{name} must be less than {lt}\"\n                    raise ValueError(exception_message)\n                if _in is not None and value not in _in:\n                    exception_message = f\"{name} must be in {_in}\"\n                    raise ValueError(exception_message)\n                if constraints is not None:\n                    for constraint in constraints:\n                        if not constraint(value):\n                            exception_message = (\n                                f\"{name} does not satisfy the \"\n                                f\"constraint {constraint}\"\n                            )\n                            raise ValueError(exception_message)\n                setattr(self, f\"_{name}\", value)\n\n            return property(getter, setter)\n\n        for f in dataclasses.fields(class_to_register):\n            if (\n                \"gt\" in f.metadata\n                or \"lt\" in f.metadata\n                or \"_in\" in f.metadata\n                or \"constraints\" in f.metadata\n            ):\n                setattr(\n                    class_to_register,\n                    f.name,\n                    create_property(\n                        f.name,\n                        f.metadata.get(\"gt\"),\n                        f.metadata.get(\"lt\"),\n                        f.metadata.get(\"_in\"),\n                        f.metadata.get(\"constraints\"),\n                    ),\n                )\n\n        # manipulate docstring so that metadata is included\n\n        return class_to_register\n\n    if class_to_register is not None:\n        return decorator(class_to_register)\n    return decorator\n</code></pre>"},{"location":"apis/config_io/","title":"Config IO","text":"<p>The module contains the IO functions.</p> <p>The IO functions are used to read and write the configuration file.</p>"},{"location":"apis/config_io/#simple_config_builder.config_io.construct_config","title":"<code>construct_config</code>","text":"<p>Construct the configuration objects.</p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def construct_config(config_data: Any):\n    \"\"\"Construct the configuration objects.\"\"\"\n    # If the configuration data is not a dictionary,\n    if not isinstance(config_data, dict):\n        return config_data\n\n    # Recursively construct the configuration objects\n    # from the configuration dictionary.\n    for key, value in config_data.items():\n        if isinstance(value, dict):\n            config_data[key] = construct_config(value)\n        if isinstance(value, list):\n            for i, item in enumerate(value):\n                if isinstance(item, dict):\n                    value[i] = construct_config(item)\n        if isinstance(value, tuple):\n            value = list(value)\n            for i, item in enumerate(value):\n                if isinstance(item, dict):\n                    value[i] = construct_config(item)\n            config_data[key] = tuple(value)\n    if \"_config_class_type\" in config_data:\n        config_class_type = config_data[\"_config_class_type\"]\n        config_class = ConfigClassRegistry.get(config_class_type)\n        return config_class(**config_data)\n    return config_data\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.parse_config","title":"<code>parse_config</code>","text":"<p>Parse the configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> <code>config_type</code> <p>The configuration file type.</p> <p> TYPE: <code>ConfigTypes</code> </p> RETURNS DESCRIPTION <code>dict</code> <p>The configuration dictionary.</p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def parse_config(config_file: str, config_type: ConfigTypes)-&gt; dict:\n    \"\"\"\n    Parse the configuration file.\n\n    Params:\n        config_file: The configuration file path.\n        config_type: The configuration file type.\n\n    Returns:\n        The configuration dictionary.\n    \"\"\"\n    config_data_dct = {}\n    match config_type:\n        case ConfigTypes.JSON:\n            config_data_dct = parse_json(config_file)\n        case ConfigTypes.YAML:\n            config_data_dct = parse_yaml(config_file)\n        case ConfigTypes.TOML:\n            config_data_dct = parse_toml(config_file)\n        case _:\n            raise ValueError(\"The configuration type is not supported.\")\n    return construct_config(config_data_dct)\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.parse_json","title":"<code>parse_json</code>","text":"<p>Parse the JSON configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <p>The parsed json data.</p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def parse_json(config_file: str):\n    \"\"\"\n    Parse the JSON configuration file.\n\n    Params:\n        config_file: The configuration file path.\n\n    Returns:\n        The parsed json data.\n    \"\"\"\n    import json\n\n    with open(config_file, \"r\") as f:\n        return json.load(f)\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.parse_toml","title":"<code>parse_toml</code>","text":"<p>Parse the TOML configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <p>The parsed toml data.</p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def parse_toml(config_file: str):\n    \"\"\"\n    Parse the TOML configuration file.\n\n    Params:\n        config_file: The configuration file path.\n\n    Returns:\n        The parsed toml data.\n    \"\"\"\n    import toml\n\n    with open(config_file, \"r\") as f:\n        return toml.load(f)\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.parse_yaml","title":"<code>parse_yaml</code>","text":"<p>Parse the YAML configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <p>The parsed yaml data.</p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def parse_yaml(config_file: str):\n    \"\"\"\n    Parse the YAML configuration file.\n\n    Params:\n        config_file: The configuration file path.\n\n    Returns:\n        The parsed yaml data.\n    \"\"\"\n    with open(config_file, \"r\") as f:\n        import yaml\n\n        return yaml.load(f, Loader=yaml.FullLoader)\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.write_config","title":"<code>write_config</code>","text":"<p>Write the configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> <code>config_data</code> <p>The configuration data.</p> <p> TYPE: <code>dict</code> </p> <code>config_type</code> <p>The configuration file type.</p> <p> TYPE: <code>ConfigTypes</code> </p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def write_config(\n    config_file: str, config_data: dict, config_type: ConfigTypes\n):\n    \"\"\"\n    Write the configuration file.\n\n    Params:\n        config_file: The configuration file path.\n        config_data: The configuration data.\n        config_type: The configuration file type.\n    \"\"\"\n    # try to make the data to a dictionary\n    config_data = to_dict(config_data)\n    match config_type:\n        case ConfigTypes.JSON:\n            write_json(config_file, config_data)\n        case ConfigTypes.YAML:\n            write_yaml(config_file, config_data)\n        case ConfigTypes.TOML:\n            write_toml(config_file, config_data)\n        case _:\n            raise ValueError(\"The configuration type is not supported.\")\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.write_json","title":"<code>write_json</code>","text":"<p>Write the JSON configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> <code>config_data</code> <p>The configuration data.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def write_json(config_file: str, config_data: dict):\n    \"\"\"\n    Write the JSON configuration file.\n\n    Params:\n        config_file: The configuration file path.\n        config_data: The configuration data.\n    \"\"\"\n    import json\n\n    with open(config_file, \"w\") as f:\n        json.dump(config_data, f, indent=4)\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.write_toml","title":"<code>write_toml</code>","text":"<p>Write the TOML configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> <code>config_data</code> <p>The configuration data.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def write_toml(config_file: str, config_data: dict):\n    \"\"\"\n    Write the TOML configuration file.\n\n    Params:\n        config_file: The configuration file path.\n        config_data: The configuration data.\n    \"\"\"\n    import toml\n\n    with open(config_file, \"w\") as f:\n        toml.dump(config_data, f)\n</code></pre>"},{"location":"apis/config_io/#simple_config_builder.config_io.write_yaml","title":"<code>write_yaml</code>","text":"<p>Write the YAML configuration file.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> <code>config_data</code> <p>The configuration data.</p> <p> TYPE: <code>dict</code> </p> Source code in <code>src/simple_config_builder/config_io.py</code> <pre><code>def write_yaml(config_file: str, config_data: dict):\n    \"\"\"\n    Write the YAML configuration file.\n\n    Params:\n        config_file: The configuration file path.\n        config_data: The configuration data.\n    \"\"\"\n    import yaml\n\n    with open(config_file, \"w\") as f:\n        yaml.dump(config_data, f)\n</code></pre>"},{"location":"apis/config_types/","title":"Config Types","text":"<p>The module defines the configuration types using an enumeration.</p>"},{"location":"apis/config_types/#simple_config_builder.config_types.ConfigTypes","title":"<code>ConfigTypes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>The enumeration of the configuration types.</p> <p>The enumeration defines the configuration types that are supported by the configuration manager. The configuration types are used to determine the format of the configuration file.</p> Source code in <code>src/simple_config_builder/config_types.py</code> <pre><code>class ConfigTypes(Enum):\n    \"\"\"\n    The enumeration of the configuration types.\n\n    The enumeration defines the configuration types that are supported by the\n    configuration manager. The configuration types are used to determine the\n    format of the configuration file.\n    \"\"\"\n\n    JSON = \"json\"\n    YAML = \"yaml\"\n    TOML = \"toml\"\n</code></pre>"},{"location":"apis/configparser/","title":"Configparser","text":"<p>The configparser module.</p> <p>The module contains the configparser class. The configparser class is used to parse the configuration file and construct the configuration objects. It gives the ability to autosave the configuration file when the configuration objects are updated.</p>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser","title":"<code>Configparser</code>","text":"<p>The Configparser class.</p> <p>The Configparser class is used to parse the configuration file and construct the configuration objects. It gives the ability to autosave the configuration file when the configuration objects are updated.</p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>class Configparser:\n    \"\"\"\n    The Configparser class.\n\n    The Configparser class is used to parse the configuration file and\n    construct the configuration objects. It gives the ability to autosave\n    the configuration file when the configuration objects are updated.\n    \"\"\"\n\n    def __init__(\n        self,\n        config_file: str,\n        config_type: ConfigTypes | None = None,\n        autosave: bool = False,\n        autoreload: bool = False,\n    ):\n        \"\"\"\n        Initialize the configparser.\n\n        Params:\n            config_file: The configuration file path.\n            config_type: The configuration type. Defaults to None.\n            autosave: Autosave the configuration file. Defaults to False.\n            autoreload: Autoreload the configuration file. Defaults to False.\n        \"\"\"\n        self.config_file = config_file\n        self.config_type = config_type\n        self.autosave = autosave\n        self.autoreload = autoreload\n        if self.autoreload and self.autosave:\n            raise ValueError(\n                \"Autoreload and autosave cannot be enabled at the same time.\"\n            )\n\n        if self.config_type is None:\n            self.config_type = self._get_config_type()\n        # first read\n        self.config_data = parse_config(self.config_file, self.config_type)\n        if self.autoreload:\n            self._auto_reload_config()\n        if self.autosave:\n            self._auto_save_config()\n\n    def _get_config_type(self) -&gt; ConfigTypes:\n        \"\"\"\n        Get the configuration type from the configuration file.\n\n        Returns:\n            The configuration type.\n        \"\"\"\n        if self.config_file.endswith(\".json\"):\n            return ConfigTypes.JSON\n        if self.config_file.endswith(\".yaml\"):\n            return ConfigTypes.YAML\n        if self.config_file.endswith(\".toml\"):\n            return ConfigTypes.TOML\n        raise ValueError(\"The configuration type is not supported.\")\n\n    def _auto_save_config(self):\n        \"\"\"Autosave the configuration file.\"\"\"\n        self._old_config_data = self.config_data\n\n        def _save_config():\n            if self._old_config_data != self.config_data:\n                write_config(\n                    self.config_file, self.config_data, self.config_type\n                )\n                self._old_config_data = self.config_data\n\n        Timer(1, _save_config).start()\n\n    def _auto_reload_config(self):\n        \"\"\"Autoreload the configuration file.\"\"\"\n\n        # Check for changes in the configuration file\n        def _reload_config():\n            new_config_data = parse_config(self.config_file, self.config_type)\n            if new_config_data != self.config_data:\n                self.config_data = new_config_data\n\n        Timer(1, _reload_config).start()\n\n    def __setitem__(self, key, value):\n        \"\"\"\n        Set the value for the given key in the configuration data.\n\n        Params:\n            key: The key in the configuration data.\n            value: The value to set for the key.\n        \"\"\"\n        self.config_data[key] = value\n\n    def __getitem__(self, key):\n        \"\"\"\n        Get the value for the given key in the configuration data.\n\n        Params:\n            key: The key in the configuration data.\n\n        Returns:\n            The value for the key.\n        \"\"\"\n        return self.config_data[key]\n\n    def __delitem__(self, key):\n        \"\"\"Delete the key from the configuration data.\"\"\"\n        del self.config_data[key]\n\n    def save(self):\n        \"\"\"Save the configuration data to the configuration file.\"\"\"\n        write_config(self.config_file, self.config_data, self.config_type)\n\n    def reload(self):\n        \"\"\"Reload the configuration data from the configuration file.\"\"\"\n        self.config_data = parse_config(self.config_file, self.config_type)\n</code></pre>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser.__delitem__","title":"<code>__delitem__</code>","text":"<p>Delete the key from the configuration data.</p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>def __delitem__(self, key):\n    \"\"\"Delete the key from the configuration data.\"\"\"\n    del self.config_data[key]\n</code></pre>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser.__getitem__","title":"<code>__getitem__</code>","text":"<p>Get the value for the given key in the configuration data.</p> PARAMETER DESCRIPTION <code>key</code> <p>The key in the configuration data.</p> <p> </p> RETURNS DESCRIPTION <p>The value for the key.</p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>def __getitem__(self, key):\n    \"\"\"\n    Get the value for the given key in the configuration data.\n\n    Params:\n        key: The key in the configuration data.\n\n    Returns:\n        The value for the key.\n    \"\"\"\n    return self.config_data[key]\n</code></pre>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser.__init__","title":"<code>__init__</code>","text":"<p>Initialize the configparser.</p> PARAMETER DESCRIPTION <code>config_file</code> <p>The configuration file path.</p> <p> TYPE: <code>str</code> </p> <code>config_type</code> <p>The configuration type. Defaults to None.</p> <p> TYPE: <code>ConfigTypes | None</code> DEFAULT: <code>None</code> </p> <code>autosave</code> <p>Autosave the configuration file. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>autoreload</code> <p>Autoreload the configuration file. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>def __init__(\n    self,\n    config_file: str,\n    config_type: ConfigTypes | None = None,\n    autosave: bool = False,\n    autoreload: bool = False,\n):\n    \"\"\"\n    Initialize the configparser.\n\n    Params:\n        config_file: The configuration file path.\n        config_type: The configuration type. Defaults to None.\n        autosave: Autosave the configuration file. Defaults to False.\n        autoreload: Autoreload the configuration file. Defaults to False.\n    \"\"\"\n    self.config_file = config_file\n    self.config_type = config_type\n    self.autosave = autosave\n    self.autoreload = autoreload\n    if self.autoreload and self.autosave:\n        raise ValueError(\n            \"Autoreload and autosave cannot be enabled at the same time.\"\n        )\n\n    if self.config_type is None:\n        self.config_type = self._get_config_type()\n    # first read\n    self.config_data = parse_config(self.config_file, self.config_type)\n    if self.autoreload:\n        self._auto_reload_config()\n    if self.autosave:\n        self._auto_save_config()\n</code></pre>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser.__setitem__","title":"<code>__setitem__</code>","text":"<p>Set the value for the given key in the configuration data.</p> PARAMETER DESCRIPTION <code>key</code> <p>The key in the configuration data.</p> <p> </p> <code>value</code> <p>The value to set for the key.</p> <p> </p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>def __setitem__(self, key, value):\n    \"\"\"\n    Set the value for the given key in the configuration data.\n\n    Params:\n        key: The key in the configuration data.\n        value: The value to set for the key.\n    \"\"\"\n    self.config_data[key] = value\n</code></pre>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser.reload","title":"<code>reload</code>","text":"<p>Reload the configuration data from the configuration file.</p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>def reload(self):\n    \"\"\"Reload the configuration data from the configuration file.\"\"\"\n    self.config_data = parse_config(self.config_file, self.config_type)\n</code></pre>"},{"location":"apis/configparser/#simple_config_builder.configparser.Configparser.save","title":"<code>save</code>","text":"<p>Save the configuration data to the configuration file.</p> Source code in <code>src/simple_config_builder/configparser.py</code> <pre><code>def save(self):\n    \"\"\"Save the configuration data to the configuration file.\"\"\"\n    write_config(self.config_file, self.config_data, self.config_type)\n</code></pre>"},{"location":"apis/utils/","title":"Utils","text":"<p>Utils for the config module.</p>"},{"location":"apis/utils/#simple_config_builder.utils.import_modules_from_directory","title":"<code>import_modules_from_directory</code>","text":"<p>Import and check fo @configclass decorator in the given directory.</p> PARAMETER DESCRIPTION <code>directory</code> <p>str</p> <p> TYPE: <code>str</code> </p> Source code in <code>src/simple_config_builder/utils.py</code> <pre><code>def import_modules_from_directory(directory:str):\n    \"\"\"\n    Import and check fo @configclass decorator in the given directory.\n\n    Params:\n        directory: str\n    \"\"\"\n    # Iterate over all files and subdirectories in the given directory\n    import os\n    import importlib.util\n\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            # Check if the file is a Python file\n            if filename.endswith(\".py\") and filename != \"__init__.py\":\n                # Get the module name (without .py extension)\n                module_name = filename[:-3]\n\n                # Create the full module path\n                module_path = os.path.join(dirpath, filename)\n\n                with open(module_path, \"r\") as file:\n                    content = file.read()\n                    if (\n                        \"@configclass\" in content\n                        or \"from config.config import configclass\" in content\n                        or \"import config.config\" in content\n                    ):\n                        # Dynamically import the module\n                        try:\n                            spec = importlib.util.spec_from_file_location(\n                                module_name, module_path\n                            )\n                            module = importlib.util.module_from_spec(spec)\n                            spec.loader.exec_module(module)\n                        except Exception as e:\n                            raise ImportError(\n                                f\"Error while importing \"\n                                f\"module {module_name}: {e}\"\n                            )\n</code></pre>"}]}